// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto

#include "todo.pb.h"
#include "todo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protos {

static const char* TodoManager_method_names[] = {
  "/protos.TodoManager/AddTodo",
  "/protos.TodoManager/EditTodo",
  "/protos.TodoManager/GetTodo",
};

std::unique_ptr< TodoManager::Stub> TodoManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TodoManager::Stub> stub(new TodoManager::Stub(channel));
  return stub;
}

TodoManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddTodo_(TodoManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditTodo_(TodoManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTodo_(TodoManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TodoManager::Stub::AddTodo(::grpc::ClientContext* context, const ::protos::TodoItem& request, ::protos::TodoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddTodo_, context, request, response);
}

void TodoManager::Stub::experimental_async::AddTodo(::grpc::ClientContext* context, const ::protos::TodoItem* request, ::protos::TodoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTodo_, context, request, response, std::move(f));
}

void TodoManager::Stub::experimental_async::AddTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protos::TodoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTodo_, context, request, response, std::move(f));
}

void TodoManager::Stub::experimental_async::AddTodo(::grpc::ClientContext* context, const ::protos::TodoItem* request, ::protos::TodoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTodo_, context, request, response, reactor);
}

void TodoManager::Stub::experimental_async::AddTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protos::TodoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTodo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::TodoResponse>* TodoManager::Stub::AsyncAddTodoRaw(::grpc::ClientContext* context, const ::protos::TodoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protos::TodoResponse>::Create(channel_.get(), cq, rpcmethod_AddTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protos::TodoResponse>* TodoManager::Stub::PrepareAsyncAddTodoRaw(::grpc::ClientContext* context, const ::protos::TodoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protos::TodoResponse>::Create(channel_.get(), cq, rpcmethod_AddTodo_, context, request, false);
}

::grpc::Status TodoManager::Stub::EditTodo(::grpc::ClientContext* context, const ::protos::TodoItem& request, ::protos::TodoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EditTodo_, context, request, response);
}

void TodoManager::Stub::experimental_async::EditTodo(::grpc::ClientContext* context, const ::protos::TodoItem* request, ::protos::TodoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EditTodo_, context, request, response, std::move(f));
}

void TodoManager::Stub::experimental_async::EditTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protos::TodoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EditTodo_, context, request, response, std::move(f));
}

void TodoManager::Stub::experimental_async::EditTodo(::grpc::ClientContext* context, const ::protos::TodoItem* request, ::protos::TodoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EditTodo_, context, request, response, reactor);
}

void TodoManager::Stub::experimental_async::EditTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protos::TodoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EditTodo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::TodoResponse>* TodoManager::Stub::AsyncEditTodoRaw(::grpc::ClientContext* context, const ::protos::TodoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protos::TodoResponse>::Create(channel_.get(), cq, rpcmethod_EditTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protos::TodoResponse>* TodoManager::Stub::PrepareAsyncEditTodoRaw(::grpc::ClientContext* context, const ::protos::TodoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protos::TodoResponse>::Create(channel_.get(), cq, rpcmethod_EditTodo_, context, request, false);
}

::grpc::Status TodoManager::Stub::GetTodo(::grpc::ClientContext* context, const ::protos::Empty& request, ::protos::TodoList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTodo_, context, request, response);
}

void TodoManager::Stub::experimental_async::GetTodo(::grpc::ClientContext* context, const ::protos::Empty* request, ::protos::TodoList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodo_, context, request, response, std::move(f));
}

void TodoManager::Stub::experimental_async::GetTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protos::TodoList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTodo_, context, request, response, std::move(f));
}

void TodoManager::Stub::experimental_async::GetTodo(::grpc::ClientContext* context, const ::protos::Empty* request, ::protos::TodoList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodo_, context, request, response, reactor);
}

void TodoManager::Stub::experimental_async::GetTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protos::TodoList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTodo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::TodoList>* TodoManager::Stub::AsyncGetTodoRaw(::grpc::ClientContext* context, const ::protos::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protos::TodoList>::Create(channel_.get(), cq, rpcmethod_GetTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protos::TodoList>* TodoManager::Stub::PrepareAsyncGetTodoRaw(::grpc::ClientContext* context, const ::protos::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protos::TodoList>::Create(channel_.get(), cq, rpcmethod_GetTodo_, context, request, false);
}

TodoManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoManager::Service, ::protos::TodoItem, ::protos::TodoResponse>(
          std::mem_fn(&TodoManager::Service::AddTodo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoManager::Service, ::protos::TodoItem, ::protos::TodoResponse>(
          std::mem_fn(&TodoManager::Service::EditTodo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoManager::Service, ::protos::Empty, ::protos::TodoList>(
          std::mem_fn(&TodoManager::Service::GetTodo), this)));
}

TodoManager::Service::~Service() {
}

::grpc::Status TodoManager::Service::AddTodo(::grpc::ServerContext* context, const ::protos::TodoItem* request, ::protos::TodoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoManager::Service::EditTodo(::grpc::ServerContext* context, const ::protos::TodoItem* request, ::protos::TodoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoManager::Service::GetTodo(::grpc::ServerContext* context, const ::protos::Empty* request, ::protos::TodoList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protos

